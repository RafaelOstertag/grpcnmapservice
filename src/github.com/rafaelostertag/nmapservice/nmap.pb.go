// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/github.com/rafaelostertag/nmapservice/nmap.proto

package nmapservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScanRequest struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	PortSpec             string   `protobuf:"bytes,2,opt,name=portSpec,proto3" json:"portSpec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanRequest) Reset()         { *m = ScanRequest{} }
func (m *ScanRequest) String() string { return proto.CompactTextString(m) }
func (*ScanRequest) ProtoMessage()    {}
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e5d29de5c4a734, []int{0}
}

func (m *ScanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanRequest.Unmarshal(m, b)
}
func (m *ScanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanRequest.Marshal(b, m, deterministic)
}
func (m *ScanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanRequest.Merge(m, src)
}
func (m *ScanRequest) XXX_Size() int {
	return xxx_messageInfo_ScanRequest.Size(m)
}
func (m *ScanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanRequest proto.InternalMessageInfo

func (m *ScanRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ScanRequest) GetPortSpec() string {
	if m != nil {
		return m.PortSpec
	}
	return ""
}

type ScanReply struct {
	State                string            `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Addresses            []string          `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Hostnames            []string          `protobuf:"bytes,3,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	Ports                []*ScanReply_Port `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ScanReply) Reset()         { *m = ScanReply{} }
func (m *ScanReply) String() string { return proto.CompactTextString(m) }
func (*ScanReply) ProtoMessage()    {}
func (*ScanReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e5d29de5c4a734, []int{1}
}

func (m *ScanReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanReply.Unmarshal(m, b)
}
func (m *ScanReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanReply.Marshal(b, m, deterministic)
}
func (m *ScanReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanReply.Merge(m, src)
}
func (m *ScanReply) XXX_Size() int {
	return xxx_messageInfo_ScanReply.Size(m)
}
func (m *ScanReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanReply.DiscardUnknown(m)
}

var xxx_messageInfo_ScanReply proto.InternalMessageInfo

func (m *ScanReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ScanReply) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ScanReply) GetHostnames() []string {
	if m != nil {
		return m.Hostnames
	}
	return nil
}

func (m *ScanReply) GetPorts() []*ScanReply_Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

type ScanReply_Port struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScanReply_Port) Reset()         { *m = ScanReply_Port{} }
func (m *ScanReply_Port) String() string { return proto.CompactTextString(m) }
func (*ScanReply_Port) ProtoMessage()    {}
func (*ScanReply_Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e5d29de5c4a734, []int{1, 0}
}

func (m *ScanReply_Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanReply_Port.Unmarshal(m, b)
}
func (m *ScanReply_Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanReply_Port.Marshal(b, m, deterministic)
}
func (m *ScanReply_Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanReply_Port.Merge(m, src)
}
func (m *ScanReply_Port) XXX_Size() int {
	return xxx_messageInfo_ScanReply_Port.Size(m)
}
func (m *ScanReply_Port) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanReply_Port.DiscardUnknown(m)
}

var xxx_messageInfo_ScanReply_Port proto.InternalMessageInfo

func (m *ScanReply_Port) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ScanReply_Port) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ScanReply_Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ScanRequest)(nil), "ch.guengel.nmapservice.ScanRequest")
	proto.RegisterType((*ScanReply)(nil), "ch.guengel.nmapservice.ScanReply")
	proto.RegisterType((*ScanReply_Port)(nil), "ch.guengel.nmapservice.ScanReply.Port")
}

func init() {
	proto.RegisterFile("src/github.com/rafaelostertag/nmapservice/nmap.proto", fileDescriptor_40e5d29de5c4a734)
}

var fileDescriptor_40e5d29de5c4a734 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0xc6, 0xdf, 0x36, 0x6e, 0xf5, 0xe6, 0xba, 0x59, 0xa8, 0xb2, 0x2a, 0x86, 0x12, 0x04, 0xca,
	0xe4, 0x48, 0x85, 0x11, 0x16, 0x26, 0x26, 0x54, 0xa5, 0x0b, 0x62, 0x73, 0xdc, 0x23, 0xa9, 0x94,
	0xc4, 0xc6, 0x76, 0x90, 0xf8, 0xc0, 0x7c, 0x0f, 0x64, 0xa7, 0x4a, 0x33, 0xf0, 0x67, 0xbb, 0xe7,
	0xce, 0x8f, 0x9e, 0x9f, 0xef, 0xe0, 0xd6, 0x1a, 0x99, 0x95, 0x07, 0x57, 0x75, 0x05, 0x97, 0xaa,
	0xc9, 0x8c, 0x78, 0x15, 0x58, 0x2b, 0xeb, 0xd0, 0x38, 0x51, 0x66, 0x6d, 0x23, 0xb4, 0x45, 0xf3,
	0x7e, 0x90, 0x18, 0x6a, 0xae, 0x8d, 0x72, 0x8a, 0x2e, 0x65, 0xc5, 0xcb, 0x0e, 0xdb, 0x12, 0x6b,
	0x3e, 0x7a, 0x92, 0xdc, 0xc3, 0x62, 0x27, 0x45, 0x9b, 0xe3, 0x5b, 0x87, 0xd6, 0x51, 0x0a, 0xa4,
	0x52, 0xd6, 0xb1, 0xc9, 0x7a, 0x92, 0xc6, 0x79, 0xa8, 0xe9, 0x0a, 0xfe, 0x6b, 0x65, 0xdc, 0x4e,
	0xa3, 0x64, 0xd3, 0xd0, 0x1f, 0x74, 0xf2, 0x39, 0x81, 0xb8, 0xf7, 0xeb, 0xfa, 0x83, 0x9e, 0xc1,
	0xcc, 0x3a, 0xe1, 0xf0, 0x68, 0xef, 0x05, 0x3d, 0x87, 0x58, 0xec, 0xf7, 0x06, 0xad, 0x45, 0xcb,
	0xa6, 0xeb, 0x28, 0x8d, 0xf3, 0x53, 0xc3, 0x4f, 0x7d, 0x4a, 0x2b, 0x1a, 0xb4, 0x2c, 0xea, 0xa7,
	0x43, 0x83, 0xde, 0xc1, 0xcc, 0x67, 0x59, 0x46, 0xd6, 0x51, 0xba, 0xd8, 0x5c, 0xf3, 0xef, 0xbf,
	0xc1, 0x07, 0x06, 0xbe, 0x55, 0xc6, 0xe5, 0xbd, 0x69, 0xf5, 0x08, 0xc4, 0x4b, 0xba, 0x84, 0x79,
	0xdb, 0x35, 0x05, 0x9a, 0x00, 0x36, 0xcb, 0x8f, 0xea, 0xc4, 0x3b, 0x1d, 0xf3, 0x52, 0x20, 0x3e,
	0x9c, 0x45, 0xfd, 0x0e, 0x7c, 0xbd, 0x79, 0x06, 0xf2, 0xd4, 0x08, 0x4d, 0xb7, 0x40, 0x7c, 0x14,
	0xbd, 0xfc, 0x1d, 0x24, 0x2c, 0x73, 0x75, 0xf1, 0x27, 0x6d, 0xf2, 0xef, 0xe1, 0x0a, 0x7e, 0x38,
	0xcd, 0xcb, 0x62, 0x24, 0x8a, 0x79, 0x38, 0xe3, 0xcd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0x3b, 0x97, 0x6d, 0xfe, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NmapClient is the client API for Nmap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NmapClient interface {
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanReply, error)
}

type nmapClient struct {
	cc *grpc.ClientConn
}

func NewNmapClient(cc *grpc.ClientConn) NmapClient {
	return &nmapClient{cc}
}

func (c *nmapClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanReply, error) {
	out := new(ScanReply)
	err := c.cc.Invoke(ctx, "/ch.guengel.nmapservice.Nmap/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NmapServer is the server API for Nmap service.
type NmapServer interface {
	Scan(context.Context, *ScanRequest) (*ScanReply, error)
}

// UnimplementedNmapServer can be embedded to have forward compatible implementations.
type UnimplementedNmapServer struct {
}

func (*UnimplementedNmapServer) Scan(ctx context.Context, req *ScanRequest) (*ScanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}

func RegisterNmapServer(s *grpc.Server, srv NmapServer) {
	s.RegisterService(&_Nmap_serviceDesc, srv)
}

func _Nmap_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NmapServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ch.guengel.nmapservice.Nmap/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NmapServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nmap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ch.guengel.nmapservice.Nmap",
	HandlerType: (*NmapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _Nmap_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/github.com/rafaelostertag/nmapservice/nmap.proto",
}
